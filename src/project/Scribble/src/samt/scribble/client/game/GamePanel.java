/*
 * The MIT License
 *
 * Copyright 2019 SAMT.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package samt.scribble.client.game;

import java.awt.BorderLayout;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import javax.swing.JOptionPane;
import samt.scribble.DefaultScribbleParameters;
import samt.scribble.client.ScribblePanel;
import samt.scribble.communication.Commands;
import samt.scribble.communication.Connection;
import samt.scribble.communication.DatagramListener;
import samt.scribble.communication.MessageSender;
import samt.scribble.communication.messages.WordGuessMessage;

/**
 * Classe che gestisce le parole indoviate e le invia.
 *
 * @author MattiaRuberto
 * @author MatanDavidi
 * @author gabrialessi
 * @version 1.0.2 (2019-05-08 - 2019-05-15)
 */
public class GamePanel extends javax.swing.JPanel implements DatagramListener {

    /**
     * Attributo che rappresenta la connessione al server.
     */
    private Connection serverConnection;

    /**
     * Attributo che rappresenta il pannello di scribble.
     */
    private ScribblePanel scribblePanel;

    /**
     * Attributo che rappresenta il listener delle parole indovinate.
     */
    private WordGuessListener listener;

    /**
     * Il ruolo che il giocatore assume in questa partita (vedi
     * {@link samt.scribble.client.game.PlayerRole PlayerRole}).
     */
    private PlayerRole role;

    /**
     * Username dell'utente che sta utilizzando il client.
     */
    private String username;

    /**
     * Definisco un nuovo GamePanel con la connessione al server e il ruolo del
     * giocatore.
     *
     * @param connection Connessione al server.
     * @param playerRole Ruolo del giocatore.
     */
    public GamePanel(Connection connection, PlayerRole playerRole, String username) {
        initComponents();
        this.username = username;
        System.out.println("Username: " + username);
        this.serverConnection = connection;
        this.serverConnection.addDatagramListener(this);
        this.scribblePanel = new ScribblePanel(connection, playerRole);
        role = playerRole;
        this.add(this.scribblePanel, BorderLayout.CENTER);
        adjustToRole();
    }

    public GamePanel(Connection connection, PlayerRole playerRole, String username, boolean[][] matrix) {

        this(connection, playerRole, username);

        for (int i = 0; i < matrix.length; i++) {

            for (int j = 0; j < matrix[i].length; j++) {

                if (matrix[i][j]) {

                    scribblePanel.addToPointsReceived(new Point(i, j));

                }

            }

        }

        scribblePanel.repaint();

    }

    /**
     * Metodo utile per impostare il listener delle parole indovinate.
     *
     * @param listener Listener da impostare.
     */
    public void setListener(WordGuessListener listener) {
        this.listener = listener;
    }

    public void setWordToGuess(String wordToGuess) {
        jLabelWordToGuess.setText(wordToGuess);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wordGuessPanel = new javax.swing.JPanel();
        jTextFieldWord = new javax.swing.JTextField();
        jButtonSendWord = new javax.swing.JButton();
        jLabelWordToGuess = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        wordGuessPanel.setLayout(new java.awt.GridLayout(2, 1));

        jTextFieldWord.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wordGuessPanel.add(jTextFieldWord);

        jButtonSendWord.setText("Send Word");
        jButtonSendWord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSendWordMouseClicked(evt);
            }
        });
        wordGuessPanel.add(jButtonSendWord);

        add(wordGuessPanel, java.awt.BorderLayout.EAST);

        jLabelWordToGuess.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelWordToGuess.setText("Parola: ");
        add(jLabelWordToGuess, java.awt.BorderLayout.PAGE_START);

        errorLabel.setBackground(new java.awt.Color(255, 255, 255));
        errorLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(errorLabel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo che parte quando l'utente schiaccia il bottone per inviare al
     * server la parola da indovinare.
     *
     * @param evt Attributo che rappresenta le informazioni del bottone.
     */
    private void jButtonSendWordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSendWordMouseClicked
        if (jButtonSendWord.isEnabled()) {

            String wordGuess = this.jTextFieldWord.getText().trim();
            if (!wordGuess.isEmpty()) {

                if (!wordGuess.contains(DefaultScribbleParameters.WORD_GUESS_MESSAGE_SEPARATOR)) {

                    WordGuessMessage message = new WordGuessMessage(username, wordGuess);
                    try {
                        MessageSender.sendMessage(
                                InetAddress.getByName(DefaultScribbleParameters.SERVER_ADDRESS),
                                DefaultScribbleParameters.DEFAULT_SERVER_PORT,
                                message
                        );
                        jTextFieldWord.setText("");
                        errorLabel.setText("");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }

                } else {

                    errorLabel.setText("La parola inserita contiene caratteri non consentiti.");

                }

            } else {
                errorLabel.setText("Inserire la parola");
            }

        }
    }//GEN-LAST:event_jButtonSendWordMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton jButtonSendWord;
    private javax.swing.JLabel jLabelWordToGuess;
    private javax.swing.JTextField jTextFieldWord;
    private javax.swing.JPanel wordGuessPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void messageReceived(DatagramPacket packet) {
        byte[] bytes = packet.getData();

        //passera nel pacchetto da parte del server username del disegnatore e la parola da disegnare
        switch (bytes[0]) {

            case Commands.GUESSED_WORD:
                String message = new String(bytes);

                message = message.trim();
                String[] msgParts = message.split(DefaultScribbleParameters.WORD_GUESS_MESSAGE_SEPARATOR + "");

                String username = msgParts[0];
                String word = msgParts[1];
                String msg = "<html><body>"
                        + "<b style:'font-size: 200%;'>LA PAROLA È STATA INDOVINATA!!!</b>"
                        + "<br>La parola era: " + word.toLowerCase()
                        + "<br>Ha vinto: " + username + "</body></html>";

                this.listener.wordGuessed(msg);
                break;

            case Commands.WORD_GUESS:

                message = new String(bytes);
                message = message.trim();

                msgParts = message.split(DefaultScribbleParameters.WORD_GUESS_MESSAGE_SEPARATOR + "");

                username = msgParts[0];
                word = msgParts[1];

                errorLabel.setText("La parola inserita '" + word + "' è sbagliata.");
                break;

        }
    }

    /**
     * Disabilita il bottone e il campo di testo se il giocatore ha il ruolo di
     * disegnatore.
     */
    private void adjustToRole() {

        if (role == PlayerRole.Drawer) {

            jButtonSendWord.setEnabled(false);
            jTextFieldWord.setEditable(false);

        }

    }

}

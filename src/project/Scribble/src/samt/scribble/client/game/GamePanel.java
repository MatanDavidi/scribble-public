/*
 * The MIT License
 *
 * Copyright 2019 SAMT.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package samt.scribble.client.game;

import java.awt.BorderLayout;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import javax.swing.JOptionPane;
import samt.scribble.DefaultScribbleParameters;
import samt.scribble.client.ScribblePanel;
import samt.scribble.communication.Commands;
import samt.scribble.communication.Connection;
import samt.scribble.communication.DatagramListener;
import samt.scribble.communication.MessageSender;
import samt.scribble.communication.messages.WordGuessMessage;

/**
 * Classe che gestisce le parole indoviate e le invia.
 *
 * @author MattiaRuberto
 * @author MatanDavidi
 * @author gabrialessi
 * @version 1.0.2 (2019-05-08 - 2019-05-15)
 */
public class GamePanel extends javax.swing.JPanel implements DatagramListener {

    /**
     * Attributo che rappresenta la connessione al server.
     */
    private Connection serverConnection;

    /**
     * Attributo che rappresenta il pannello di scribble.
     */
    private ScribblePanel scribblePanel;

    /**
     * Attributo che rappresenta il listener delle parole indovinate.
     */
    private WordGuessListener listener;

    /**
     * Il ruolo che il giocatore assume in questa partita (vedi
     * {@link samt.scribble.client.game.PlayerRole PlayerRole}).
     */
    private PlayerRole role;
    
    /**
     * Username dell'utente che sta utilizzando il client.
     */
    private String username;

    /**
     * Definisco un nuovo GamePanel con la connessione al server e il ruolo del
     * giocatore.
     *
     * @param connection Connessione al server.
     * @param playerRole Ruolo del giocatore.
     */
    public GamePanel(Connection connection, PlayerRole playerRole, String username) {
        initComponents();
        this.username = username;
        this.serverConnection = connection;
        this.serverConnection.addDatagramListener(this);
        this.scribblePanel = new ScribblePanel(connection, playerRole);
        role = playerRole;
        this.add(this.scribblePanel, BorderLayout.CENTER);
        adjustToRole();
    }

    /**
     * Metodo utile per impostare il listener delle parole indovinate.
     *
     * @param listener Listener da impostare.
     */
    public void setListener(WordGuessListener listener) {
        this.listener = listener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wordGuessPanel = new javax.swing.JPanel();
        jTextFieldWord = new javax.swing.JTextField();
        jButtonSendWord = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        wordGuessPanel.setLayout(new java.awt.GridLayout(2, 1));
        wordGuessPanel.add(jTextFieldWord);

        jButtonSendWord.setText("Send Word");
        jButtonSendWord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSendWordMouseClicked(evt);
            }
        });
        wordGuessPanel.add(jButtonSendWord);

        add(wordGuessPanel, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo che parte quando l'utente schiaccia il bottone per inviare al
     * server la parola da indovinare.
     *
     * @param evt Attributo che rappresenta le informazioni del bottone.
     */
    private void jButtonSendWordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSendWordMouseClicked
        if (jButtonSendWord.isEnabled()) {

            String wordToGuess = this.jTextFieldWord.getText().trim();
            if (!wordToGuess.isEmpty()) {
                String msg = wordToGuess + DefaultScribbleParameters.MESSAGE_SEPARATOR + username;
                WordGuessMessage message = new WordGuessMessage(msg);
                try {
                    MessageSender.sendMessage(
                            InetAddress.getByName(DefaultScribbleParameters.SERVER_ADDRESS),
                            DefaultScribbleParameters.DEFAULT_SERVER_PORT,
                            message
                    );
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Inserire la parola");
            }

        }
    }//GEN-LAST:event_jButtonSendWordMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSendWord;
    private javax.swing.JTextField jTextFieldWord;
    private javax.swing.JPanel wordGuessPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void messageReceived(DatagramPacket packet) {
        byte[] bytes = packet.getData();
        if (bytes[0] == Commands.GUESSED_WORD) {
            String message = "";

            //estraggo lo username di chi lo ha indovinato
            for (int i = 0; i < bytes.length; i++) {
                message += (char) bytes[i];
            }

            String separator = (char) 127 + "";
            message = message.trim();
            String[] msgParts = message.split(separator);

            String username = msgParts[0];
            String word = msgParts[1];

            String msg = "LA PAROLA È STATA INDOVINATA!!!"
                    + "\nLa parola era: " + word
                    + "\nL'utente che ha indovinato la parola è: " + username;

            JOptionPane.showMessageDialog(this, msg);
            
            // "la parola" è un segnaposto
            this.listener.wordGuessed("la parola");

        }
    }

    /**
     * Disabilita il bottone e il campo di testo se il giocatore ha il ruolo di
     * disegnatore.
     */
    private void adjustToRole() {

        if (role == PlayerRole.Drawer) {

            jButtonSendWord.setEnabled(false);
            jTextFieldWord.setEditable(false);

        }

    }

}

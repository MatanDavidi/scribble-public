
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * ChatFrame Semplice chat strutturata sul protocollo UDP.
 *
 * @author Nemanja Stojanovic
 * @version 14.02.2019
 */
public class ChatFrame extends JFrame implements MessagesManagerListener {

    /**
     * Il socket.
     */
    private MessagesManager messages;

    /**
     * Creates new form ChatFrame
     */
    public ChatFrame() {
        initComponents();
        try {
            DatagramSocket socket = new DatagramSocket();
            setTitle(socket.getLocalSocketAddress().toString());
            messages = new MessagesManager(socket, this);
            messages.start();
        } catch (SocketException se) {
            System.out.println("Errore nella creazione del socket!");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPanel = new javax.swing.JScrollPane();
        textAreaMessages = new javax.swing.JTextArea();
        panelGroup = new javax.swing.JPanel();
        labelIp = new javax.swing.JLabel();
        textFieldIp = new javax.swing.JTextField();
        labelPort = new javax.swing.JLabel();
        textFieldPort = new javax.swing.JTextField();
        labelMessage = new javax.swing.JLabel();
        textFieldMessage = new javax.swing.JTextField();
        buttonSend = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        textAreaMessages.setColumns(20);
        textAreaMessages.setRows(5);
        textAreaMessages.setMinimumSize(new java.awt.Dimension(0, 100));
        scrollPanel.setViewportView(textAreaMessages);

        getContentPane().add(scrollPanel, java.awt.BorderLayout.SOUTH);

        panelGroup.setLayout(new java.awt.GridLayout(7, 1));

        labelIp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelIp.setText("Indirizzo IP");
        panelGroup.add(labelIp);
        panelGroup.add(textFieldIp);

        labelPort.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPort.setText("Port");
        panelGroup.add(labelPort);
        panelGroup.add(textFieldPort);

        labelMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMessage.setText("Messaggio");
        panelGroup.add(labelMessage);

        textFieldMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldMessageKeyPressed(evt);
            }
        });
        panelGroup.add(textFieldMessage);

        buttonSend.setText("Invia");
        buttonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendActionPerformed(evt);
            }
        });
        panelGroup.add(buttonSend);

        getContentPane().add(panelGroup, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Quando il bottone viene premuto ricavo i dati dalla maschera e li invio
     * al server.
     *
     * @param evt Evento del bottone.
     */
    private void buttonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendActionPerformed
        try {
            String ip = textFieldIp.getText();
            InetAddress address = InetAddress.getByName(ip);
            int port = Integer.parseInt(textFieldPort.getText());
            String message = textFieldMessage.getText();
            if (!message.isEmpty()) {
                messages.sendMessage(message, address, port);
                textFieldMessage.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Inserisci un messaggio!");
            }
        } catch (UnknownHostException uhe) {
            JOptionPane.showMessageDialog(null, "Ip non valido!");
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "Inserisci una porta!");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Errore nell'invio del pacchetto!");
        } catch (IllegalArgumentException ie) {
            JOptionPane.showMessageDialog(null, "Uno o pi√π valori non sono validi!");
        }
    }//GEN-LAST:event_buttonSendActionPerformed

    /**
     * Metodo chamato ad ogni pressione all'interno del textFieldMessage.
     * @param evt Evento della pressione di un tasto.
     */
    private void textFieldMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldMessageKeyPressed
        if (evt.getKeyCode() == 10) {
            buttonSendActionPerformed(null);
        }
    }//GEN-LAST:event_textFieldMessageKeyPressed

    /**
     * Metodoche avvisa quando viene ricevuto un nuovo pacchetto.
     *
     * @param packet Il pacchetto ricevuto.
     * @param source L'oggetto che ha ricevuto il pacchetto.
     */
    @Override
    public void receivedMessage(DatagramPacket packet, MessagesManager source) {
        String message = new String(packet.getData(), 0, packet.getLength());
        String ip = packet.getAddress().toString();
        int port = packet.getPort();
        textAreaMessages.append(ip + ":" + port + " " + message + "\n");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSend;
    private javax.swing.JLabel labelIp;
    private javax.swing.JLabel labelMessage;
    private javax.swing.JLabel labelPort;
    private javax.swing.JPanel panelGroup;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTextArea textAreaMessages;
    private javax.swing.JTextField textFieldIp;
    private javax.swing.JTextField textFieldMessage;
    private javax.swing.JTextField textFieldPort;
    // End of variables declaration//GEN-END:variables

}
